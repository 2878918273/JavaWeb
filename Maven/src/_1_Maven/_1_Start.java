package _1_Maven;

/*
第一节 ：为什要学习Maven？--------------------------------------------------------------------------------------
1. Maven作为依赖管理工具
    ①jar包的规模（在项目中，有时为了实现三个功能我们可能需要导入106个jar包）
    ②jar包的来源（总结：站找起来麻烦）
    ③jar包之间的依赖关系（框架中使用的jar包，不仅数量庞大，而且彼此之间存在错综复杂的依赖关系）
        使用Maven后，依赖对应的jar包能够自动下载，方便，快捷又规范

2. Maven作为构建管理工具
3. 结论
    管理规模庞大的jar包，需要专门的工具。
    脱离IDE环境执行构建操作，需要专门工具。

第二节：什么是Maven？
    Maven是Apache软件基金会组织维护的一款专门为Java项目提供构建和依赖管理支持的工具

    1. 构建
    Java项目开发过程中，构建指的是使用原材料生产产品的过程，
        例如：
        原材料
           java源代码
           基于HTML的Thymeleaf文件
           图片
           配置文件
           ......
        产品：
            一个可以在服务器上运行的项目

    构建过程包含的主要环节：
        清理：删除上一次构建的结果，为下一次构建做好准备
        编译: Java源程序编译成*.class字节码文件
        测试：运行提前准备好的测试程序
        报告：针对刚才的测试的结果生成一个全面的信息
        打包
            Java工程:jar包
            Web工程：war包
        安装：把一个Maven工程经过打包操作生成的jar包或war包存入到Maven仓库
        部署：部署jar包：把一个jar包部署到Nexus私服服务器上
              部署war包：借助相关Maven插件（例如cargo），将war包部署到Tomcat服务器上

    2.依赖
    如果A工程里面用到了B工程的类、接口、配置文件等等这样的资源。那么我们就可以说A依赖B，
    依赖管理中要解决的具体问题

配置好文件
② Maven中的坐标
[1] 向量说明
使用三个[向量]在[Maven的仓库]中唯一的定位到一个[jar]包。
    groupId：公司或组织的id
    artifactId：一个项目或者是项目中的一个模块的Id
    version：版本号
（补充：一个项目里可包含一个或多个工程）

[2]三个向量的取值方式
    groupId:公司或组织域名的倒叙，通常也会加上项目的名称
        例如：com.atguigu.maven
    artifactId:模块名称，将来作为Maven工程的工程名
    version：模块的版本号，根据自己的需要设定

此时我们已经有了三个目录，分别是：
    Maven核心程序：中军大帐
    Maven本地仓库：兵营
    本地工作空间：战场

使用命令生成Maven工程
    mvn archetype:generate
    主命令：mvn
    子命令：archetype 插件
           generate  目标

Maven核心概念:POM
① 含义
POM：Project Object Model，项目对象模型。和POM类似的是：DOM（Document Object Model），文档对象模型。它们都是模型化思想的具体体现。
②模型化思想
POM表示将工程抽象为一个模型，再用程序中的对象来描述这个模型。这样我们就可以用程序来管理项目了。我们在开发过程中，最基本的做法就是
    将现实生活中的事物抽象为数据模型，然后封装模型为一个对象，这样就可以在程序中计算与现实相关的数据。
③对应的配置文件
POM理念集中体现在Maven工程根目录下pom.xml这个配置文件中。所以这个pom.xml配置文件就是Maven工程的核心配置文件。其实学习Maven就是
    学这个文件怎么配置，各个配置有说明作用。

约定目录结构的意义：
Maven为了让构建过程尽可能能够自动化完成，所以必须约定目录结构的作用

约定大于配置：
Maven对于目录结构这个问题，没有采用配置的方式，而是基于约定。这样会让我们在开发过程中非常方便。如果每次创建Maven工程后，
还需要针对各个目录的位置进行详细的配置，那肯定非常麻烦。
目前开发领域的技术发展趋势就是：约定大于配置，配置大于编码。

执行Maven的构建命令
1.要求
运行Maven中和构建操作相关的命令时，必须进入到pom.xml所在的目录。如果没有在pom.xml所在的目录运行Maven的构建命令，那么会看到下面的的错误信息
略......
mvn -v命令和构建操作无关，只要正确配置了PATH，在任何目录下执行都可以。而构建相关命令要在pom.xml所在目录下运行--操作那个工程，就进入这个工程pom.xml目录

Web工程目录不能在Java工程目录中


补充：静态导入的效果是将类中的静态资源导入当前类
这样一来，在当前类中就可以直接使用Assert类中的静态资源，不需要写类名
例：import static Assert.*;


实验七：测试依赖的传递性
1. 依赖的传递性

实验九：继承
1.概念
Maven工程之间，A工程继承B工程
    B工程：父工程
    A工程；子工程
本质上是A工程的pom.xml中的配置继承了B工程中pom.xml的配置
2.作用:
    在父工程中统一管理项目中的依赖信息，具体来说是管理依赖信息的版本
    它的背景是：
        对一个比较大型的项目进行了模块拆分。
        一个project下面，创建了很多个module
        每一个module都需要配置自己的依赖信息。

    它背后的需求是：
        在每一个module中各自维护各自的依赖信息很容易发生出入，不易统一管理。
        使用同一个框架内的不同jar包，它们应该是同一个版本，所以整个项目中使用的框架版本需要统一。
        使用框架时所需要的jar包组合（或者说依赖信息组合）需要经过长期摸索和反复调试，最终确定一个可用组合。
        这个耗费很大精力总结出来的方案不应该在新的项目中重新探索。

    通过在父工程中为整个项目维护依赖信息的组合既保证了整个项目使用规范，准确的jar包；又能够将以往的经验沉淀下来，节约时间和精力。
①创建父工程
工程创建好之后，要修改它的打包方式：
只有打包方式为pom的Maven工程能够管理其它Maven工程。打包方式为pom的Maven工程中不写业务代码，他是专门管理其它Mavne工程的工程。
在父工程中统一管理依赖信息
注意：即使在父工程配置了对依赖的管理，子工程需要使用具体哪一个依赖还是要明确配置
      对于已经在父工程进行了管理的依赖，子工程中引用时可以不写 version
      <version>4.0.0.RELEASE</version>
      情况一 ：确实省略了version标签：子工程采纳的就是父工程管理的版本
      情况二 ：没有省略version标签：
               A:这里配置了version和父工程管理的版本一致最终还是采纳这个版本
               B:这里配置了version
               但是和父工程管理的版本不一致，那么这里子工程配置的版本会覆盖父工程管理的版本并最终采纳。
               （绝大部分情况下子工程还是遵从父工程统一管理的依赖）。


配置自定义属性：
    通过引用属性表达式设定版本号，这样版本号就成了一个动态值。
    通过属性名解析后才知道具体是什么值
    在pom.xml文件的properties标签中 创建我们自定义的属性标签 标签名：属性名 标签值：属性值
    例：<标签名> 值 </标签名>
        引用方式：${标签名}

5.实际意义：
                            公司及父工程

        项目及父工程          项目级父工程        项目级父工程

                             子系统级父工程      子系统级父工程

                            模块  模块  模块      模块  模块  模块

编写一套符合要求，开发各种功能都能正常工作的依赖著组合并不容易。如果公司里已经有人总结了成熟的方案，那么再开发新项目时，
如果不使用原有的积累，而是重新摸索，会浪费大量的时间。为了提高效率，我们可以使用工程的继承机制，让成熟的依赖组合方案能够保留下来。

如上图所示，公司级的父工程中管理的就是成熟的依赖组合方案，各个新项目，子系统各取所需即可

补充：添加依赖只需在相应的pom.xml的dependencies标签中添加denpendence标签后再往里面添加<groupId><artifactId><version>标签即可


实验十 ：聚合
1. 聚合本身的含义：
    部分组成整体
    动画片中的经典台词：“我来组成头部！我来组成手臂！”就是聚合关系最生动的体现。
2.Maven中的聚合
使用一个总工程将各个模块工程汇集起来，作为一个整体对应完整的项目。
    项目：整体
    模块：部分
概念的对应关系：
    从继承关系角度来看：父工程，子工程
    从聚合关系角度来看：总工程，模块工程
3.好处
一键执行Maven命令：很多构建命令都可以在“总工程”中一键执行
以mvn install命令为例：Maven要求有父工程时先安装父工程；有依赖的工程时先安装被依赖的工程。我们自己考虑这些规则会很麻烦。
但是工程聚合之后，在总工程执行mvn install可以一键完成安装，而且会自动按照正确的顺序进行。
配置聚合之后，各个模块工程会在总工程中展示一个列表，让项目中的各个模块一目了然。

5.依赖循环问题
如果A工程依赖B工程，B工程依赖C工程，C工程又反过来依赖A工程，那么在执行构建操作的时候会报错：循环引用




*/

/**
 * @author wx
 * @create 2023-06-01 16:30
 */
public class _1_Start {
}
